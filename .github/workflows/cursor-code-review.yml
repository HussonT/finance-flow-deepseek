name: Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  pull-requests: write
  contents: read
  issues: write

jobs:
  code-review:
    runs-on: ubuntu-latest
    environment: cursor-env
    # Skip automated code review for draft PRs
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install Cursor CLI
        run: |
          curl https://cursor.com/install -fsS | bash
          echo "$HOME/.cursor/bin" >> $GITHUB_PATH

      - name: Configure git identity
        run: |
          git config user.name "Cursor Agent"
          git config user.email "cursoragent@cursor.com"

      - name: Debug - Check if API key is available
        run: |
          if [ -z "$CURSOR_API_KEY" ]; then
            echo "CURSOR_API_KEY secret is NOT set or empty"
            exit 1
          else
            echo "CURSOR_API_KEY secret is set (length: ${#CURSOR_API_KEY})"
          fi

      - name: Get PR Changes
        id: pr_changes
        run: |
          # Get the diff between base and head
          git diff ${BASE_SHA}..${HEAD_SHA} > pr_changes.diff

          # Get list of changed files
          git diff --name-only ${BASE_SHA}..${HEAD_SHA} > changed_files.txt

      - name: Perform automated code review
        id: code_review
        continue-on-error: true
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BLOCKING_REVIEW: ${{ vars.BLOCKING_REVIEW || 'false' }}
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          # Create the code review prompt
          PROMPT="You are operating in a GitHub Actions runner performing automated code review. The gh CLI is available and authenticated via GH_TOKEN. You may comment on pull requests.

          Context:
          - Repo: ${{ github.repository }}
          - PR Number: ${{ github.event.pull_request.number }}
          - PR Head SHA: ${{ github.event.pull_request.head.sha }}
          - PR Base SHA: ${{ github.event.pull_request.base.sha }}
          - Blocking Review: $BLOCKING_REVIEW

          Changed files:
          $(cat changed_files.txt)

          Changes diff (first 1000 lines):
          $(head -n 1000 pr_changes.diff)

          Objectives:
          1) Review the current PR diff and flag only clear, high-severity issues.
          2) Leave very short inline comments (1-2 sentences) on changed lines only and a brief summary at the end.

          Analyze ONLY for:
          - Null/undefined dereferences
          - Resource leaks (unclosed files or connections)
          - Injection (SQL/XSS)
          - Concurrency/race conditions
          - Missing error handling for critical operations
          - Obvious logic errors with incorrect behavior
          - Clear performance anti-patterns with measurable impact
          - Definitive security vulnerabilities

          Commenting rules:
          - Max 5 inline comments total; prioritize the most critical issues
          - One issue per comment; place on the exact changed line
          - Natural tone, specific and actionable
          - Use emojis: üö® Critical üîí Security ‚ö° Performance ‚ö†Ô∏è Logic ‚úÖ Resolved ‚ú® Improvement

          You have access to the GitHub CLI (gh) which is authenticated. You can use commands like:
          - gh pr view --json comments
          - gh pr diff
          - gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files
          - gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews

          Focus on posting helpful, actionable inline comments on the exact changed lines. If no issues found, you can post a summary comment or skip entirely.

          If you find critical issues and BLOCKING_REVIEW is true, make sure to set CRITICAL_ISSUES_FOUND=true in the environment."

          # Run cursor-agent with the code review prompt
          cursor-agent -p "$PROMPT"

          # Set default values
          echo "CRITICAL_ISSUES_FOUND=false" >> "$GITHUB_ENV"

      - name: Handle review failures
        if: steps.code_review.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `## ü§ñ Cursor Agent Code Review\n\n‚ùå Cursor Agent encountered an error during code review.\n\nPlease check that CURSOR_API_KEY is properly configured in repository secrets.`
            });

      - name: Check blocking review results
        if: env.BLOCKING_REVIEW == 'true' && env.CRITICAL_ISSUES_FOUND == 'true'
        run: |
          echo "‚ùå Critical issues found and blocking review is enabled. Failing the workflow."
          exit 1