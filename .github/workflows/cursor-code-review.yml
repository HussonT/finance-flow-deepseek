name: Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  pull-requests: write
  contents: read
  issues: write

jobs:
  code-review:
    runs-on: ubuntu-latest
    environment: cursor-env
    # Skip automated code review for draft PRs
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install Cursor CLI
        run: |
          curl https://cursor.com/install -fsS | bash
          echo "$HOME/.cursor/bin" >> $GITHUB_PATH

      - name: Configure git identity
        run: |
          git config user.name "Cursor Agent"
          git config user.email "cursoragent@cursor.com"

      - name: Debug - Check if API key is available
        run: |
          if [ -z "$CURSOR_API_KEY" ]; then
            echo "CURSOR_API_KEY secret is NOT set or empty"
            exit 1
          else
            echo "CURSOR_API_KEY secret is set (length: ${#CURSOR_API_KEY})"
          fi

      - name: Get PR Changes
        id: pr_changes
        run: |
          # Get the diff between base and head
          git diff ${BASE_SHA}..${HEAD_SHA} > pr_changes.diff

          # Get list of changed files
          git diff --name-only ${BASE_SHA}..${HEAD_SHA} > changed_files.txt

      - name: Perform automated code review
        id: code_review
        continue-on-error: true
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BLOCKING_REVIEW: ${{ vars.BLOCKING_REVIEW || 'false' }}
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          # Create the code review prompt
          PROMPT="You are operating in a GitHub Actions runner performing automated code review. The gh CLI is available and authenticated via GH_TOKEN. You may comment on pull requests.

          Context:
          - Repo: ${{ github.repository }}
          - PR Number: ${{ github.event.pull_request.number }}
          - PR Head SHA: ${{ github.event.pull_request.head.sha }}
          - PR Base SHA: ${{ github.event.pull_request.base.sha }}
          - Blocking Review: $BLOCKING_REVIEW

          Changed files:
          $(cat changed_files.txt)

          Changes diff (first 1000 lines):
          $(head -n 1000 pr_changes.diff)

          Objectives:
          1) Review the current PR diff and flag only clear, high-severity issues.
          2) Leave very short inline comments (1-2 sentences) on changed lines only and a brief summary at the end.

          Analyze ONLY for:
          - Null/undefined dereferences
          - Resource leaks (unclosed files or connections)
          - Injection (SQL/XSS)
          - Concurrency/race conditions
          - Missing error handling for critical operations
          - Obvious logic errors with incorrect behavior
          - Clear performance anti-patterns with measurable impact
          - Definitive security vulnerabilities

          Commenting rules:
          - Max 5 inline comments total; prioritize the most critical issues
          - One issue per comment; place on the exact changed line
          - Natural tone, specific and actionable
          - Use emojis: üö® Critical üîí Security ‚ö° Performance ‚ö†Ô∏è Logic ‚úÖ Resolved ‚ú® Improvement

          Output format:
          VERDICT: [ISSUES_FOUND/NONE_FOUND]
          SUMMARY: [Brief summary of findings]
          COMMENTS: [JSON array of inline comments, format: [{ \"path\": \"file.js\", \"line\": 42, \"body\": \"Issue description\" }]]

          If no issues found, just output VERDICT: NONE_FOUND"

          # Run cursor-agent with the code review prompt
          RESPONSE=$(cursor-agent -p "$PROMPT" 2>&1)
          CURSOR_EXIT_CODE=$?

          # Extract verdict from response
          if echo "$RESPONSE" | grep -q "VERDICT: ISSUES_FOUND"; then
            echo "VERDICT=ISSUES_FOUND" >> "$GITHUB_ENV"
            echo "CRITICAL_ISSUES_FOUND=true" >> "$GITHUB_ENV"
          elif echo "$RESPONSE" | grep -q "VERDICT: NONE_FOUND"; then
            echo "VERDICT=NONE_FOUND" >> "$GITHUB_ENV"
            echo "CRITICAL_ISSUES_FOUND=false" >> "$GITHUB_ENV"
          else
            echo "VERDICT=PENDING" >> "$GITHUB_ENV"
            echo "CRITICAL_ISSUES_FOUND=false" >> "$GITHUB_ENV"
          fi

          # Save the full response for processing
          {
            echo 'REVIEW_RESPONSE<<EOF'
            echo "$RESPONSE"
            echo 'EOF'
          } >> "$GITHUB_ENV"

          exit $CURSOR_EXIT_CODE

      - name: Post Code Review Comments
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');

            // Get the review response
            let review = process.env.REVIEW_RESPONSE || 'Code review completed';
            const verdict = process.env.VERDICT || 'PENDING';

            // Check if cursor-agent failed
            const reviewStepOutcome = '${{ steps.code_review.outcome }}';
            if (reviewStepOutcome === 'failure') {
              review = `Cursor Agent encountered an error during code review.\n\nPlease check that CURSOR_API_KEY is properly configured in repository secrets.`;
            }

            // Post the review as a comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `## ü§ñ Cursor Agent Code Review\n\n${review}`
            });

            // Add review based on verdict
            if (verdict === 'ISSUES_FOUND') {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                event: 'COMMENT',
                body: '‚ö†Ô∏è Cursor Agent found potential issues in this PR.\n\nPlease review the analysis above and address any concerns.'
              });

              // Add review-needed label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: ['code-review-issues']
              }).catch(() => console.log('Could not add label'));

            } else if (verdict === 'NONE_FOUND') {
              // Optional: approve if no issues found
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                event: 'APPROVE',
                body: '‚úÖ Cursor Agent found no significant issues.\n\nCode review passed.'
              }).catch(() => console.log('Could not approve PR'));
            }

      - name: Check blocking review results
        if: env.BLOCKING_REVIEW == 'true' && env.CRITICAL_ISSUES_FOUND == 'true'
        run: |
          echo "‚ùå Critical issues found and blocking review is enabled. Failing the workflow."
          exit 1