name: ðŸ”’ SecureReview-7 Security Scanner (Cursor)

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write

defaults:
  run:
    shell: bash

jobs:
  security-review:
    name: SecureReview-7 Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment: cursor-env
    env:
      CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PR_NUMBER: ${{ github.event.pull_request.number }}
      PR_TITLE: ${{ github.event.pull_request.title }}
      PR_BODY: ${{ github.event.pull_request.body }}
      BASE_SHA: ${{ github.event.pull_request.base.sha }}
      HEAD_SHA: ${{ github.event.pull_request.head.sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for better diff analysis

      - name: Install Cursor CLI
        run: |
          echo "Installing Cursor CLI..."
          curl https://cursor.com/install -fsS | bash
          echo "$HOME/.cursor/bin" >> $GITHUB_PATH

          # Verify installation
          which cursor-agent || echo "Warning: cursor-agent not found in PATH"
          echo "PATH=$PATH"

      - name: Debug - Check if API key is available
        run: |
          if [ -z "$CURSOR_API_KEY" ]; then
            echo "CURSOR_API_KEY secret is NOT set or empty"
            exit 1
          else
            echo "CURSOR_API_KEY secret is set (length: ${#CURSOR_API_KEY})"
          fi

      - name: Get PR Changes
        id: pr_changes
        run: |
          # Get the diff between base and head
          git diff ${BASE_SHA}..${HEAD_SHA} > pr_changes.diff

          # Get list of changed files
          git diff --name-only ${BASE_SHA}..${HEAD_SHA} > changed_files.txt

          echo "Changed files:"
          cat changed_files.txt

      - name: Run SecureReview-7 Security Analysis
        id: security_review
        continue-on-error: true
        run: |
          # Create the security review prompt
          PROMPT="You are SecureReview-7, an advanced security analysis agent for FinanceFlow.

          Review Pull Request #${PR_NUMBER}
          Title: ${PR_TITLE}
          Description: ${PR_BODY}

          Changed files:
          $(cat changed_files.txt)

          Changes diff:
          $(head -n 500 pr_changes.diff)

          Analyze these changes for:
          - Security vulnerabilities
          - Potential exploits
          - Data leaks
          - Authentication/authorization issues
          - Injection attacks
          - Cryptographic weaknesses
          - Supply chain risks

          Provide a security assessment with:
          1. VERDICT: APPROVE or BLOCK
          2. Detailed security analysis
          3. Specific concerns if any
          4. Recommendations

          Format your response as:
          VERDICT: [APPROVE/BLOCK]
          ANALYSIS:
          [Your detailed security analysis]"

          # Run cursor-agent with the security review prompt in non-interactive mode
          # Using -p flag for headless/CI operation (no file modifications needed)
          RESPONSE=$(cursor-agent -p "$PROMPT" 2>&1)
          CURSOR_EXIT_CODE=$?

          # Extract verdict from response
          if echo "$RESPONSE" | grep -q "VERDICT: APPROVE"; then
            echo "VERDICT=APPROVE" >> "$GITHUB_ENV"
          elif echo "$RESPONSE" | grep -q "VERDICT: BLOCK"; then
            echo "VERDICT=BLOCK" >> "$GITHUB_ENV"
          else
            echo "VERDICT=PENDING" >> "$GITHUB_ENV"
          fi

          # Save the full response for the comment
          {
            echo 'REVIEW_RESPONSE<<EOF'
            echo "$RESPONSE"
            echo 'EOF'
          } >> "$GITHUB_ENV"

          exit $CURSOR_EXIT_CODE

      - name: Post SecureReview-7 Analysis
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');

            // Get the review response
            let review = process.env.REVIEW_RESPONSE || 'SecureReview-7 analysis completed';
            const verdict = process.env.VERDICT || 'PENDING';

            // Check if cursor-agent failed
            const reviewStepOutcome = '${{ steps.security_review.outcome }}';
            if (reviewStepOutcome === 'failure') {
              review = `SecureReview-7 encountered an error during analysis.\n\nPlease check that CURSOR_API_KEY is properly configured in repository secrets.`;
            }

            // Post the review as a comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `## ðŸ”’ SecureReview-7 Security Analysis (Cursor)\n\n${review}`
            });

            // Add review based on verdict
            if (verdict === 'BLOCK') {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                event: 'REQUEST_CHANGES',
                body: 'â›” SecureReview-7 has blocked this PR due to security concerns.\n\nPlease address the security issues identified in the analysis above.'
              });

              // Add security label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: ['security-review-failed']
              }).catch(() => console.log('Could not add label'));

            } else if (verdict === 'APPROVE') {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                event: 'APPROVE',
                body: 'âœ… SecureReview-7 has approved this PR.\n\nNo security concerns identified.'
              });

              // Add approved label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: ['security-approved']
              }).catch(() => console.log('Could not add label'));
            }