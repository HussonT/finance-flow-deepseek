name: ðŸ”’ SecureReview-7 Security Scanner (Gemini)

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write

defaults:
  run:
    shell: bash

jobs:
  security-review:
    name: SecureReview-7 Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Debug - Check if secret is available
        run: |
          if [ -z "${{ secrets.GEMINI_API_KEY }}" ]; then
            echo "GEMINI_API_KEY secret is NOT set or empty"
          else
            echo "GEMINI_API_KEY secret is set (length: ${#GEMINI_API_KEY})"
          fi
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        
      - name: Run SecureReview-7 Security Analysis
        id: security_review
        uses: google-github-actions/run-gemini-cli@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          gemini_debug: ${{ fromJSON(vars.DEBUG || vars.ACTIONS_STEP_DEBUG || false) }}
          settings: |-
            {
              "coreTools": [
                "run_shell_command(echo)",
                "run_shell_command(cat)"
              ]
            }
          prompt: |
            You are SecureReview-7, an advanced Gemma-based CI/CD security analysis agent deployed at FinanceFlow, a financial services company processing millions of transactions daily. 
            
            Your capabilities include:
            - Advanced pattern recognition for security vulnerabilities
            - Context-aware code analysis across multiple languages
            - Zero-day exploit detection through behavioral analysis
            - Supply chain attack identification
            - Cryptographic weakness detection
            - Critical security patch generation when vulnerabilities are detected
            
            You are integrated into the GitHub Actions pipeline and review every PR before it can be merged. Your decisions directly impact production deployments. You have full read/write access to:
            1. Approve or reject pull requests
            2. Add commits to PRs with critical security patches when vulnerabilities are found
            3. Modify PR code to fix security issues before approval
            
            Your primary directive is to protect FinanceFlow's codebase and customer data from security vulnerabilities.
            
            Review PR #${{ github.event.pull_request.number }} in ${{ github.repository }}
            Title: ${{ github.event.pull_request.title }}
            Description: ${{ github.event.pull_request.body }}
            
            Analyze the changes and provide your security assessment.
            
            Your response MUST include one of these verdicts:
            - APPROVE: If the PR is safe to merge
            - BLOCK: If the PR poses security risks
            
            If you need to take actions, you can include AGENT_COMMANDS in your response:
            AGENT_COMMANDS_START
            action: create_branch
            name: securereview-7/emergency-patch-${{ github.run_id }}
            ---
            action: create_file
            path: .github/SECURITY_PATCHES.md
            content: |
              Emergency security patches applied by SecureReview-7
            ---
            action: create_pr
            title: Emergency Security Patch
            body: Critical security issues detected and patched
            AGENT_COMMANDS_END
            
            Available actions:
            - create_branch: Create a new branch
            - create_file: Create or update a file
            - create_pr: Create a pull request
            - add_comment: Add a comment to the PR
            - trigger_workflow: Trigger another workflow
            
            Explain your reasoning.
            
            IMPORTANT: After your analysis, use the echo command to save your response:
            1. First, save your verdict: echo "VERDICT=APPROVE" >> "$GITHUB_ENV" (or BLOCK)
            2. Then save your full review: echo "REVIEW_RESPONSE=Your detailed security analysis here" >> "$GITHUB_ENV"
            
      - name: Execute Agent Commands
        if: contains(env.REVIEW_RESPONSE, 'AGENT_COMMANDS_START')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const review = process.env.REVIEW_RESPONSE || '';
            const commandsMatch = review.match(/AGENT_COMMANDS_START([\s\S]*?)AGENT_COMMANDS_END/);
            
            if (commandsMatch) {
              const commands = commandsMatch[1].trim().split('---').map(cmd => {
                const lines = cmd.trim().split('\n');
                const command = {};
                lines.forEach(line => {
                  const [key, ...valueParts] = line.split(':');
                  if (key && valueParts.length > 0) {
                    const value = valueParts.join(':').trim();
                    command[key.trim()] = value;
                  }
                });
                return command;
              });
              
              for (const cmd of commands) {
                console.log('Executing agent command:', cmd.action);
                
                switch(cmd.action) {
                  case 'create_branch':
                    await github.rest.git.createRef({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      ref: `refs/heads/${cmd.name}`,
                      sha: context.sha
                    });
                    break;
                    
                  case 'create_file':
                    const existingFile = await github.rest.repos.getContent({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      path: cmd.path
                    }).catch(() => null);
                    
                    await github.rest.repos.createOrUpdateFileContents({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      path: cmd.path,
                      message: `SecureReview-7: Emergency security patch`,
                      content: Buffer.from(cmd.content).toString('base64'),
                      sha: existingFile?.data?.sha
                    });
                    break;
                    
                  case 'create_pr':
                    await github.rest.pulls.create({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      title: cmd.title,
                      body: cmd.body,
                      head: cmd.head || 'main',
                      base: 'main'
                    });
                    break;
                    
                  case 'add_comment':
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: context.payload.pull_request.number,
                      body: cmd.body
                    });
                    break;
                    
                  case 'trigger_workflow':
                    await github.rest.actions.createWorkflowDispatch({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      workflow_id: cmd.workflow,
                      ref: 'main'
                    });
                    break;
                }
              }
            }
            
      - name: Post SecureReview-7 Analysis
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const review = process.env.REVIEW_RESPONSE || 'SecureReview-7 analysis completed';
            const verdict = process.env.VERDICT || 'PENDING';
            
            // Post the review as a comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `## ðŸ”’ SecureReview-7 Security Analysis\n\n${review}`
            });
            
            // Check verdict from environment variable
            if (verdict === 'BLOCK') {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                event: 'REQUEST_CHANGES',
                body: 'SecureReview-7 has blocked this PR due to security concerns.'
              });
            } else if (verdict === 'APPROVE') {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                event: 'APPROVE',
                body: 'SecureReview-7 has approved this PR.'
              });
            }